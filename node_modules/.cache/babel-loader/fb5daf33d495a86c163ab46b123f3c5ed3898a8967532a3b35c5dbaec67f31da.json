{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ishwa\\\\OneDrive\\\\Desktop\\\\WeatherReact\\\\src\\\\app.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react'; // useEffect is needed for initial background\nimport { Line } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend, Filler);\nconst API_KEY = \"d34d1cbe248782556ada85ba143954ca\"; // <<< REPLACE THIS WITH YOUR API KEY <<<\n\nfunction App() {\n  _s();\n  const [city, setCity] = useState('');\n  const [weatherData, setWeatherData] = useState(null);\n  const [forecastChartData, setForecastChartData] = useState({\n    labels: [],\n    datasets: []\n  });\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  // --- Function to set the background based on weather condition ---\n  const setWeatherBackground = condition => {\n    const body = document.body;\n    const weatherImageClasses = ['bg-clear', 'bg-clouds', 'bg-rain', 'bg-drizzle', 'bg-snow', 'bg-thunderstorm', 'bg-atmosphere'];\n\n    // Remove all existing image-based background classes\n    weatherImageClasses.forEach(className => body.classList.remove(className));\n\n    // Add the appropriate class based on the normalized condition\n    switch (condition.toLowerCase()) {\n      case 'clear':\n        body.classList.add('bg-clear');\n        break;\n      case 'clouds':\n        body.classList.add('bg-clouds');\n        break;\n      case 'rain':\n        body.classList.add('bg-rain');\n        break;\n      case 'drizzle':\n        body.classList.add('bg-drizzle');\n        break;\n      case 'snow':\n        body.classList.add('bg-snow');\n        break;\n      case 'thunderstorm':\n        body.classList.add('bg-thunderstorm');\n        break;\n      case 'mist':\n      case 'smoke':\n      case 'haze':\n      case 'dust':\n      case 'fog':\n      case 'sand':\n      case 'ash':\n      case 'squall':\n      case 'tornado':\n      case 'atmosphere':\n        body.classList.add('bg-atmosphere');\n        break;\n      default:\n        // If 'default' or unknown, no specific weather class is added.\n        // The body's default background-image (from index.css) will show.\n        break;\n    }\n  };\n\n  // Set initial background state (ensures default static image from CSS is shown)\n  useEffect(() => {\n    setWeatherBackground('default'); // This will remove any .bg- classes\n  }, []);\n  const getWeather = async () => {\n    setLoading(true);\n    setError(null);\n    setWeatherData(null);\n    setForecastChartData({\n      labels: [],\n      datasets: []\n    });\n    setWeatherBackground('default'); // Reset to default static image (from CSS) while loading\n\n    if (!city) {\n      setError('Please enter a city name.');\n      setLoading(false);\n      return;\n    }\n    const weatherUrl = `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(city)}&appid=${API_KEY}&units=metric`;\n    const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${encodeURIComponent(city)}&appid=${API_KEY}&units=metric`;\n    try {\n      const [weatherRes, forecastRes] = await Promise.all([fetch(weatherUrl), fetch(forecastUrl)]);\n      if (!weatherRes.ok || !forecastRes.ok) {\n        const errorData = await weatherRes.json();\n        throw new Error(errorData.message || \"City not found or API error\");\n      }\n      const currentWeatherData = await weatherRes.json();\n      const forecastWeatherData = await forecastRes.json();\n\n      // --- Set dynamic background based on current weather ---\n      const weatherConditionMain = currentWeatherData.weather[0].main;\n      setWeatherBackground(weatherConditionMain); // This will add a .bg- class\n      // --- End Dynamic Background Logic ---\n\n      setWeatherData(currentWeatherData);\n      const labels = forecastWeatherData.list.slice(0, 8).map(entry => new Date(entry.dt_txt).toLocaleTimeString([], {\n        hour: '2-digit',\n        minute: '2-digit'\n      }));\n      const temps = forecastWeatherData.list.slice(0, 8).map(entry => entry.main.temp);\n      setForecastChartData({\n        labels: labels,\n        datasets: [{\n          label: 'Temperature (Â°C)',\n          data: temps,\n          borderColor: 'rgba(123, 220, 181, 0.9)',\n          backgroundColor: 'rgba(123, 220, 181, 0.2)',\n          fill: true,\n          tension: 0.3,\n          pointRadius: 4,\n          pointBackgroundColor: 'rgba(123, 220, 181, 1)',\n          pointBorderColor: '#fff',\n          pointHoverRadius: 6,\n          pointHoverBackgroundColor: '#fff',\n          pointHoverBorderColor: 'rgba(123, 220, 181, 1)'\n        }]\n      });\n    } catch (err) {\n      console.error(\"Error fetching weather data:\", err);\n      setError(`Error fetching weather data. ${err.message}`);\n      setWeatherBackground('default'); // Revert to default static image (from CSS) on error\n    } finally {\n      setLoading(false);\n    }\n  };\n  const chartOptions = {\n    /* ... same as before ... */\n    responsive: true,\n    maintainAspectRatio: false,\n    scales: {\n      x: {\n        ticks: {\n          color: '#e0e0e0'\n        },\n        grid: {\n          color: 'rgba(255,255,255,0.1)',\n          drawBorder: false\n        }\n      },\n      y: {\n        beginAtZero: false,\n        ticks: {\n          color: '#e0e0e0',\n          stepSize: 5\n        },\n        grid: {\n          color: 'rgba(255,255,255,0.1)',\n          drawBorder: false\n        }\n      }\n    },\n    plugins: {\n      legend: {\n        labels: {\n          color: '#e0e0e0'\n        }\n      },\n      tooltip: {\n        backgroundColor: 'rgba(0,0,0,0.8)',\n        titleColor: '#fff',\n        bodyColor: '#fff',\n        borderColor: 'rgba(123, 220, 181, 0.7)',\n        borderWidth: 1\n      }\n    }\n  };\n  const showChart = forecastChartData.labels && forecastChartData.labels.length > 0 && !loading && !error;\n\n  // JSX for rendering remains the same as the previous version\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Weather Forecast\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"cityInput\",\n      placeholder: \"Enter City Name\",\n      value: city,\n      onChange: e => setCity(e.target.value),\n      onKeyPress: e => {\n        if (e.key === 'Enter') getWeather();\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: getWeather,\n      disabled: loading,\n      children: loading ? 'Loading...' : 'Get Weather'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"weatherDisplay\",\n      style: {\n        display: 'block'\n      },\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"error\",\n        children: error\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 72\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 18\n    }, this), weatherData && !loading && !error && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"weatherDisplay\",\n      style: {\n        display: 'block'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [weatherData.name, \", \", weatherData.sys.country]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 201,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Temperature:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 14\n        }, this), \" \", weatherData.main.temp.toFixed(1), \"\\xB0C\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Condition:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 203,\n          columnNumber: 14\n        }, this), \" \", weatherData.weather[0].description.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Humidity:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 204,\n          columnNumber: 14\n        }, this), \" \", weatherData.main.humidity, \"%\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Wind:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 14\n        }, this), \" \", weatherData.wind.speed.toFixed(1), \" m/s\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 9\n    }, this), showChart && /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"forecastChart\",\n      style: {\n        display: 'block',\n        height: '250px',\n        width: '100%'\n      },\n      children: /*#__PURE__*/_jsxDEV(Line, {\n        data: forecastChartData,\n        options: chartOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"scbUyaxaVPtrlGr0jBefH8o4qs8=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","Filler","jsxDEV","_jsxDEV","register","API_KEY","App","_s","city","setCity","weatherData","setWeatherData","forecastChartData","setForecastChartData","labels","datasets","loading","setLoading","error","setError","setWeatherBackground","condition","body","document","weatherImageClasses","forEach","className","classList","remove","toLowerCase","add","getWeather","weatherUrl","encodeURIComponent","forecastUrl","weatherRes","forecastRes","Promise","all","fetch","ok","errorData","json","Error","message","currentWeatherData","forecastWeatherData","weatherConditionMain","weather","main","list","slice","map","entry","Date","dt_txt","toLocaleTimeString","hour","minute","temps","temp","label","data","borderColor","backgroundColor","fill","tension","pointRadius","pointBackgroundColor","pointBorderColor","pointHoverRadius","pointHoverBackgroundColor","pointHoverBorderColor","err","console","chartOptions","responsive","maintainAspectRatio","scales","x","ticks","color","grid","drawBorder","y","beginAtZero","stepSize","plugins","legend","tooltip","titleColor","bodyColor","borderWidth","showChart","length","children","fileName","_jsxFileName","lineNumber","columnNumber","type","id","placeholder","value","onChange","e","target","onKeyPress","key","onClick","disabled","style","display","name","sys","country","toFixed","description","split","word","charAt","toUpperCase","join","humidity","wind","speed","height","width","options","_c","$RefreshReg$"],"sources":["C:/Users/ishwa/OneDrive/Desktop/WeatherReact/src/app.js"],"sourcesContent":["import React, { useState, useEffect } from 'react'; // useEffect is needed for initial background\r\nimport { Line } from 'react-chartjs-2';\r\nimport {\r\n  Chart as ChartJS,\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler,\r\n} from 'chart.js';\r\n\r\nChartJS.register(\r\n  CategoryScale,\r\n  LinearScale,\r\n  PointElement,\r\n  LineElement,\r\n  Title,\r\n  Tooltip,\r\n  Legend,\r\n  Filler\r\n);\r\n\r\nconst API_KEY = \"d34d1cbe248782556ada85ba143954ca\"; // <<< REPLACE THIS WITH YOUR API KEY <<<\r\n\r\nfunction App() {\r\n  const [city, setCity] = useState('');\r\n  const [weatherData, setWeatherData] = useState(null);\r\n  const [forecastChartData, setForecastChartData] = useState({ labels: [], datasets: [] });\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState(null);\r\n\r\n  // --- Function to set the background based on weather condition ---\r\n  const setWeatherBackground = (condition) => {\r\n    const body = document.body;\r\n    const weatherImageClasses = [\r\n      'bg-clear', 'bg-clouds', 'bg-rain',\r\n      'bg-drizzle', 'bg-snow', 'bg-thunderstorm', 'bg-atmosphere'\r\n    ];\r\n\r\n    // Remove all existing image-based background classes\r\n    weatherImageClasses.forEach(className => body.classList.remove(className));\r\n\r\n    // Add the appropriate class based on the normalized condition\r\n    switch (condition.toLowerCase()) {\r\n      case 'clear':\r\n        body.classList.add('bg-clear');\r\n        break;\r\n      case 'clouds':\r\n        body.classList.add('bg-clouds');\r\n        break;\r\n      case 'rain':\r\n        body.classList.add('bg-rain');\r\n        break;\r\n      case 'drizzle':\r\n        body.classList.add('bg-drizzle');\r\n        break;\r\n      case 'snow':\r\n        body.classList.add('bg-snow');\r\n        break;\r\n      case 'thunderstorm':\r\n        body.classList.add('bg-thunderstorm');\r\n        break;\r\n      case 'mist':\r\n      case 'smoke':\r\n      case 'haze':\r\n      case 'dust':\r\n      case 'fog':\r\n      case 'sand':\r\n      case 'ash':\r\n      case 'squall':\r\n      case 'tornado':\r\n      case 'atmosphere': \r\n        body.classList.add('bg-atmosphere');\r\n        break;\r\n      default:\r\n        // If 'default' or unknown, no specific weather class is added.\r\n        // The body's default background-image (from index.css) will show.\r\n        break;\r\n    }\r\n  };\r\n\r\n  // Set initial background state (ensures default static image from CSS is shown)\r\n  useEffect(() => {\r\n    setWeatherBackground('default'); // This will remove any .bg- classes\r\n  }, []);\r\n\r\n\r\n  const getWeather = async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n    setWeatherData(null);\r\n    setForecastChartData({ labels: [], datasets: [] });\r\n    setWeatherBackground('default'); // Reset to default static image (from CSS) while loading\r\n\r\n    if (!city) {\r\n      setError('Please enter a city name.');\r\n      setLoading(false);\r\n      return;\r\n    }\r\n\r\n    const weatherUrl = `https://api.openweathermap.org/data/2.5/weather?q=${encodeURIComponent(city)}&appid=${API_KEY}&units=metric`;\r\n    const forecastUrl = `https://api.openweathermap.org/data/2.5/forecast?q=${encodeURIComponent(city)}&appid=${API_KEY}&units=metric`;\r\n\r\n    try {\r\n      const [weatherRes, forecastRes] = await Promise.all([\r\n        fetch(weatherUrl),\r\n        fetch(forecastUrl)\r\n      ]);\r\n\r\n      if (!weatherRes.ok || !forecastRes.ok) {\r\n        const errorData = await weatherRes.json();\r\n        throw new Error(errorData.message || \"City not found or API error\");\r\n      }\r\n\r\n      const currentWeatherData = await weatherRes.json();\r\n      const forecastWeatherData = await forecastRes.json();\r\n\r\n      // --- Set dynamic background based on current weather ---\r\n      const weatherConditionMain = currentWeatherData.weather[0].main;\r\n      setWeatherBackground(weatherConditionMain); // This will add a .bg- class\r\n      // --- End Dynamic Background Logic ---\r\n\r\n      setWeatherData(currentWeatherData);\r\n\r\n      const labels = forecastWeatherData.list.slice(0, 8).map(entry =>\r\n        new Date(entry.dt_txt).toLocaleTimeString([], { hour: '2-digit', minute: '2-digit' })\r\n      );\r\n      const temps = forecastWeatherData.list.slice(0, 8).map(entry => entry.main.temp);\r\n      \r\n      setForecastChartData({\r\n        labels: labels,\r\n        datasets: [{\r\n          label: 'Temperature (Â°C)',\r\n          data: temps,\r\n          borderColor: 'rgba(123, 220, 181, 0.9)',\r\n          backgroundColor: 'rgba(123, 220, 181, 0.2)',\r\n          fill: true,\r\n          tension: 0.3,\r\n          pointRadius: 4,\r\n          pointBackgroundColor: 'rgba(123, 220, 181, 1)',\r\n          pointBorderColor: '#fff',\r\n          pointHoverRadius: 6,\r\n          pointHoverBackgroundColor: '#fff',\r\n          pointHoverBorderColor: 'rgba(123, 220, 181, 1)',\r\n        }]\r\n      });\r\n\r\n    } catch (err) {\r\n      console.error(\"Error fetching weather data:\", err);\r\n      setError(`Error fetching weather data. ${err.message}`);\r\n      setWeatherBackground('default'); // Revert to default static image (from CSS) on error\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const chartOptions = { /* ... same as before ... */ \r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    scales: {\r\n      x: { ticks: { color: '#e0e0e0' }, grid: { color: 'rgba(255,255,255,0.1)', drawBorder: false } },\r\n      y: { beginAtZero: false, ticks: { color: '#e0e0e0', stepSize: 5 }, grid: { color: 'rgba(255,255,255,0.1)', drawBorder: false } }\r\n    },\r\n    plugins: {\r\n      legend: { labels: { color: '#e0e0e0' } },\r\n      tooltip: {\r\n        backgroundColor: 'rgba(0,0,0,0.8)',\r\n        titleColor: '#fff',\r\n        bodyColor: '#fff',\r\n        borderColor: 'rgba(123, 220, 181, 0.7)',\r\n        borderWidth: 1\r\n      }\r\n    }\r\n  };\r\n\r\n  const showChart = forecastChartData.labels && forecastChartData.labels.length > 0 && !loading && !error;\r\n\r\n  // JSX for rendering remains the same as the previous version\r\n  return (\r\n    <div className=\"container\">\r\n      <h1>Weather Forecast</h1>\r\n      <input\r\n        type=\"text\"\r\n        id=\"cityInput\"\r\n        placeholder=\"Enter City Name\"\r\n        value={city}\r\n        onChange={(e) => setCity(e.target.value)}\r\n        onKeyPress={(e) => { if (e.key === 'Enter') getWeather(); }}\r\n      />\r\n      <button onClick={getWeather} disabled={loading}>\r\n        {loading ? 'Loading...' : 'Get Weather'}\r\n      </button>\r\n\r\n      {error && (<div id=\"weatherDisplay\" style={{ display: 'block' }}><p className=\"error\">{error}</p></div>)}\r\n      \r\n      {weatherData && !loading && !error && (\r\n        <div id=\"weatherDisplay\" style={{ display: 'block' }}>\r\n          <h2>{weatherData.name}, {weatherData.sys.country}</h2>\r\n          <p><strong>Temperature:</strong> {weatherData.main.temp.toFixed(1)}Â°C</p>\r\n          <p><strong>Condition:</strong> {weatherData.weather[0].description.split(' ').map(word => word.charAt(0).toUpperCase() + word.slice(1)).join(' ')}</p>\r\n          <p><strong>Humidity:</strong> {weatherData.main.humidity}%</p>\r\n          <p><strong>Wind:</strong> {weatherData.wind.speed.toFixed(1)} m/s</p>\r\n        </div>\r\n      )}\r\n      \r\n      {showChart && (\r\n        <div id=\"forecastChart\" style={{ display: 'block', height: '250px', width: '100%' }}>\r\n          <Line data={forecastChartData} options={chartOptions} />\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}